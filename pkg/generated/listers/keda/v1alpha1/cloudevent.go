/*
Copyright 2023 The KEDA Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kedacore/keda/v2/apis/keda/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudEventLister helps list CloudEvents.
// All objects returned here must be treated as read-only.
type CloudEventLister interface {
	// List lists all CloudEvents in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloudEvent, err error)
	// CloudEvents returns an object that can list and get CloudEvents.
	CloudEvents(namespace string) CloudEventNamespaceLister
	CloudEventListerExpansion
}

// cloudEventLister implements the CloudEventLister interface.
type cloudEventLister struct {
	indexer cache.Indexer
}

// NewCloudEventLister returns a new CloudEventLister.
func NewCloudEventLister(indexer cache.Indexer) CloudEventLister {
	return &cloudEventLister{indexer: indexer}
}

// List lists all CloudEvents in the indexer.
func (s *cloudEventLister) List(selector labels.Selector) (ret []*v1alpha1.CloudEvent, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudEvent))
	})
	return ret, err
}

// CloudEvents returns an object that can list and get CloudEvents.
func (s *cloudEventLister) CloudEvents(namespace string) CloudEventNamespaceLister {
	return cloudEventNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudEventNamespaceLister helps list and get CloudEvents.
// All objects returned here must be treated as read-only.
type CloudEventNamespaceLister interface {
	// List lists all CloudEvents in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CloudEvent, err error)
	// Get retrieves the CloudEvent from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CloudEvent, error)
	CloudEventNamespaceListerExpansion
}

// cloudEventNamespaceLister implements the CloudEventNamespaceLister
// interface.
type cloudEventNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudEvents in the indexer for a given namespace.
func (s cloudEventNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudEvent, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudEvent))
	})
	return ret, err
}

// Get retrieves the CloudEvent from the indexer for a given namespace and name.
func (s cloudEventNamespaceLister) Get(name string) (*v1alpha1.CloudEvent, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloudevent"), name)
	}
	return obj.(*v1alpha1.CloudEvent), nil
}
